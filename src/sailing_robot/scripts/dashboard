#!/usr/bin/env python

import rospy
from std_msgs.msg import Float32, Float64, Int16, String
from sensor_msgs.msg import NavSatFix

import json
import os
import tornado.ioloop
import tornado.log
import tornado.web
import tornado.websocket

PORT = 8448
STATIC_PATH = os.path.expanduser('~/sailing-robot/dashboard/static')

simple_topics = [
    ('/heading', Float32),
    ('/goal_heading', Float32),
    ('/rudder_control', Int16),
    ('/sailing_state', String),
    ('/wind_direction_apparent', Float64),
]

geo_topics = [
    '/position',
]

class MessageForwarder(object):
    """Forward ROS messages to a websocket"""
    def __init__(self):
        self.sockets = []
        for topic, rostype in simple_topics:
            self.simple_forwarding(topic, rostype)
        for topic in geo_topics:
            self.geo_forwarding(topic)
            
    
    def broadcast(self, content):
        for s in self.sockets:
            s.send_json_message(content)
    
    def simple_forwarding(self, topic_name, rostype):
        def forward(msg):
            self.broadcast({'topic': topic_name, 'value': msg.data})
        return rospy.Subscriber(topic_name, rostype, forward)

    def geo_forwarding(self, topic_name):
        def forward(msg):
            self.broadcast({'topic': topic_name, 'latitude': msg.latitude,
                            'longitude': msg.longitude})
        return rospy.Subscriber(topic_name, NavSatFix, forward)

class UpdateHandler(tornado.websocket.WebSocketHandler):
    def initialize(self, forwarder):
        self.forwarder = forwarder
    
    def open(self):
        self.forwarder.sockets.append(self)
    
    def on_close(self):
        self.forwarder.sockets.remove(self)
    
    def send_json_message(self, content):
        json_msg = json.dumps(content)
        self.write_message(json_msg)

def dashboard_server():
    tornado.log.enable_pretty_logging()
    forwarder = MessageForwarder()
    app = tornado.web.Application([
        (r"/()", tornado.web.StaticFileHandler,
            {"path": STATIC_PATH, "default_filename": "index.html"}),
        (r"/updates", UpdateHandler,
            {"forwarder": forwarder}),
    ],
    static_path=STATIC_PATH,
    compiled_template_cache=False,
    )
    app.listen(PORT, address='0.0.0.0')
    loop = tornado.ioloop.IOLoop.current()
    rospy.client.on_shutdown(loop.stop)
    loop.start()


if __name__ == '__main__':
    try:
        rospy.init_node("serve_dashboard", anonymous=True)
        dashboard_server()
    except rospy.ROSInterruptException:
        pass
