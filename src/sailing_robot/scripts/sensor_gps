#!/usr/bin/python

import serial
import pynmea2
import re
import traceback

import rospy
from std_msgs.msg import Int16
from sensor_msgs.msg import NavSatFix

serial_port = serial.Serial("/dev/ttyAMA0", 9600, timeout=0.5)

def decimal_degrees(d_m, hemisphere):
    """Convert the degrees & minutes number from the GPS to decimal degrees
    
    We get the degrees and minutes unseparated, i.e. (100*degrees)+minutes
    """
    m = re.match(r'(\d+)(\d{2}\.\d+)', str(d_m))
    if not m:
        raise ValueError(d_m)
    degrees, minutes = m.group(1, 2)
    res = int(degrees) + (float(minutes) / 60)
    if hemisphere in 'SW':
        return -res
    return res

def pos_publisher():
    gps_reader = pynmea2.NMEAStreamReader()
    serial_port.readline()  # Discard first line in case it's partial
    while not rospy.is_shutdown():
        line = serial_port.readline()
        if not line.strip():
            continue

        try:
            batch = gps_reader.next(line)
        except (pynmea2.ParseError, pynmea2.ChecksumError, UnicodeError):
            s = "Error parsing GPS data.\nbuffer={!r}\nline={!r}\n{}".format(
                        gps_reader.buffer, line, traceback.format_exc()
            )
            rospy.logerr(s)
            gps_reader.stream = b''
            continue

        for sentence in batch:
            if sentence.sentence_type != 'GGA':
                continue

            msg = NavSatFix()
            if sentence.lat == '':
                continue
            msg.latitude = decimal_degrees(sentence.lat, sentence.lat_dir)
            msg.longitude = decimal_degrees(sentence.lon, sentence.lon_dir)
            pos_pub.publish(msg)
            nsats_pub.publish(int(sentence.num_sats))

if __name__ == '__main__':
    try:
        pos_pub = rospy.Publisher('/position', NavSatFix, queue_size=10)
        nsats_pub = rospy.Publisher('/gps_satellites', Int16, queue_size=10)
        rospy.init_node("sensor_gps", anonymous=True)
        pos_publisher()
    except rospy.ROSInterruptException:
        pass
