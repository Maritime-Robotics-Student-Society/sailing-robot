#!/usr/bin/env python

import rospy
from std_msgs.msg import Float64, UInt16, String

from sailing_robot.sail_data import Sail_data
import sailing_robot.pid_control as _PID

sail = Sail_data()
saildata = rospy.get_param('/sail')

def node_publisher():
    pub = rospy.Publisher('/sail_servo', UInt16, queue_size=10)
    rospy.init_node('actuator_demand_sail', anonymous=True)
    rate = rospy.Rate(10)


    while not rospy.is_shutdown():

        if sail.apparent_wind_angle  > 180:
            angle_to_wind = abs(360 - sail.apparent_wind_angle) 
        else:   
            angle_to_wind = abs(sail.apparent_wind_angle)
        rawsail_angle = 0.5 * angle_to_wind
        sail_angle = _PID.saturation(rawsail_angle, -saildata["maxAngle"], \
            saildata["maxAngle"])
        pub.publish(int(sail_angle))

        rate.sleep()


if __name__ == '__main__':
    try:
        rospy.Subscriber('/wind_direction_apparent', Float64, sail.update_apparent_wind_angle)
        node_publisher()
    except rospy.ROSInterruptException:
        pass
